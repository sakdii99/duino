#!/usr/bin/env python3# Minimal version of Duino-Coin PC Miner, useful for developing own apps. Created by revox 2020import socket, hashlib, os, urllib.request # Only python3 included librariessoc = socket.socket() username = "saroden"password = "Galeng1630" # This sections grabs pool adress and port from Duino-Coin GitHub fileserverip = "https://raw.githubusercontent.com/revoxhere/duino-coin/gh-pages/serverip.txt" # Serverip filewith urllib.request.urlopen(serverip) as content: content = content.read().decode().splitlines() #Read content and split into linespool_address = content[0] #Line 1 = pool addresspool_port = content[1] #Line 2 = pool port # This section connects and logs user to the serversoc.connect((str(pool_address), int(pool_port))) # Connect to the serverserver_version = soc.recv(3).decode() # Get server versionprint("Server is on version", server_version) soc.send(bytes("LOGI," + username + "," + password, encoding="utf8")) # Send login dataresponse = soc.recv(2).decode() # Get server feedback about logging in if response == "OK": print("Loged in")else: print("Error loging in - check account credentials!") soc.close() os._exit(1) # Mining sectionwhile True: soc.send(bytes("JOB", encoding="utf8")) # Send job request job = soc.recv(1024).decode() # Get work from pool job = job.split(",") # Split received data to job (job and difficulty) difficulty = job[2] for result in range(100 * int(difficulty) + 1): # Calculate hash with difficulty ducos1 = hashlib.sha1(str(job[0] + str(result)).encode("utf-8")).hexdigest() # Generate hash if job[1] == ducos1: # If result is even with job soc.send(bytes(str(result), encoding="utf8")) # Send result of hashing algorithm to pool feedback = soc.recv(1024).decode() # Get feedback about the result if feedback == "GOOD": # If result was good print("Accepted share", result, "Difficulty", difficulty) break elif feedback == "BAD": # If result was bad print("Rejected share", result, "Difficulty", difficulty) break